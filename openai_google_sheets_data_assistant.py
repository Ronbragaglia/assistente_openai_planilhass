# -*- coding: utf-8 -*-
"""OpenAI Google Sheets Data Assistant

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/124fbx6MJiKEQNgc9rfE27MWJgO9z1l78
"""

!pip install openai pandas numpy

import os
import openai
import time
import pandas as pd


openai.api_key = os.getenv("")

if not openai.api_key:
    raise ValueError("❌ ERRO: A chave da API da OpenAI não foi encontrada! Verifique se você configurou corretamente.")

print("✅ OpenAI API Key carregada com sucesso!")


google_sheets = [
    "https://docs.google.com/spreadsheets/d/1YNfT0aewRLQQAP0a0zHBQQD195AAAmFhq0TkS2xUCi8/edit?usp=sharing",
    "https://docs.google.com/spreadsheets/d/1CEaGbezkThrJRc9JmbL9Tf9bRkGhGB0Ny-z6Vj1jtyM/edit?usp=sharing"
]

def load_google_sheet(sheet_url):
    try:
        sheet_id = sheet_url.split("/d/")[1].split("/")[0]
        csv_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/gviz/tq?tqx=out:csv"
        df = pd.read_csv(csv_url, low_memory=False)
        print(f"✔️ Planilha carregada com {df.shape[0]} linhas e {df.shape[1]} colunas.")
        return df
    except Exception as e:
        print(f"❌ Erro ao carregar planilha: {e}")
        return pd.DataFrame()


dataframes = [load_google_sheet(url) for url in google_sheets if not load_google_sheet(url).empty]
if not dataframes:
    raise Exception("❌ Nenhuma planilha carregada. Verifique as permissões.")


df = pd.concat(dataframes, ignore_index=True).fillna("")
text_data = df.astype(str).apply(lambda x: ' '.join(x), axis=1).tolist()


file_path = "dados_planilhas.txt"
with open(file_path, "w", encoding="utf-8") as f:
    f.write("\n".join(text_data))

print("📁 Arquivo de dados criado:", file_path)


file_response = openai.files.create(
    file=open(file_path, "rb"),
    purpose="assistants"
)

file_id = file_response.id
print(f"📂 Arquivo enviado para a OpenAI! ID: {file_id}")


assistant = openai.beta.assistants.create(
    name="Assistente de Dados",
    instructions="Responda perguntas com base no arquivo enviado.",
    model="gpt-4-turbo",
    tools=[{"type": "file_search"}]
)

assistant_id = assistant.id
print(f"🤖 Assistente criado com sucesso! ID: {assistant_id}")


thread = openai.beta.threads.create()
thread_id = thread.id
print(f"📌 Thread criada! ID: {thread_id}")


def perguntar_openai(pergunta):
    """ Envia uma pergunta ao Assistente e retorna a resposta. """


    openai.beta.threads.messages.create(
        thread_id=thread_id,
        role="user",
        content=pergunta
    )

    run = openai.beta.threads.runs.create(
        thread_id=thread_id,
        assistant_id=assistant_id,
        tools=[{"type": "file_search"}]
    )


    while True:
        run_status = openai.beta.threads.runs.retrieve(
            thread_id=thread_id,
            run_id=run.id
        )
        if run_status.status == "completed":
            break
        time.sleep(2)


    messages = openai.beta.threads.messages.list(thread_id=thread_id)
    resposta = messages.data[0].content[0].text.value
    return resposta


def atendimento_automatico(intervalo_minutos=5, duracao_minutos=30):
    """
    Envia perguntas automaticamente ao assistente em intervalos regulares.

    - `intervalo_minutos`: tempo entre cada pergunta.
    - `duracao_minutos`: tempo total de funcionamento.
    """
    mensagens = [
        "Olá! Como posso ajudar você hoje?",
        "Tem alguma dúvida sobre os dados?",
        "Precisa de alguma informação específica?",
        "Estou aqui para te auxiliar. Qual sua dúvida?",
    ]

    total_interacoes = duracao_minutos // intervalo_minutos
    for i in range(total_interacoes):
        pergunta = mensagens[i % len(mensagens)]
        resposta = perguntar_openai(pergunta)

        print(f"🔹 Pergunta ({i+1}/{total_interacoes}): {pergunta}")
        print(f"💡 Resposta: {resposta}\n")

        if i < total_interacoes - 1:
            time.sleep(intervalo_minutos * 60)


atendimento_automatico(intervalo_minutos=5, duracao_minutos=30)